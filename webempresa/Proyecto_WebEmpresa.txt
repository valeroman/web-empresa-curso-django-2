# WEB EMPRESARIAL

	Crea un proyecto Django de nombre webempresa utilizando nuestro entorno virtual django2.

	Añade una app Core con una vista para cada página de la cafetería, deberás añadir las respectivas URL y lograr que todo funcione.
	Por ahora puedes devolver un HttpResponse simple con el nombre de las página:

	Inicio home/

	Historia about/

	Servicios services/

	Visítanos store/

	Contacto contact/

	Blog blog/

	Sample sample/ (esta es para páginas de prueba)
	
	#--------------------------------------------------------------------------------------------------------------------------------------------------------#

	# Crear el entorno virtual
		C:\CursoDjango>activate django2
	
	# Crear el proyecto
		django-admin startproject webempresa
		
	# Abrir el proyecto en Visual Studios Code
		VSC -> Archivo -> abrir carpeta "webempresa"
		
	# Seleccionar el entorno virtual django2
		
	# Click derecho a manage.py -> Run Python File in Terminal

	# Crear el app core
		python manage.py startapp core
		
	# Crear las vistas (FBV: Function Based Views)
	# Son vistas se definen en simples funciones que luego las llamamos en el urls.py
	
	# Nota: en el views.py del core, solo se dejan las paginas estaticas 
		Inicio home/
		Historia about/
		Servicios services/
		Visitanos store/
		Contacto contact/
		Blog blog/
		Sample sample/
		
		def home(request):
			return HttpResponse('Inicio')
			
	# Crear las URL en urls.py de webempresas
		# Importar las vistas
		from core import views
			# Paths del core
			urlpatterns = [
				# Paths del core
				path('', views.home, name='home'),
			]
			
	# Poner el servidor en marcha
		python manage.py runserver
		
	
	# ORGANIZAR LAS URLS
		# Se crea en la carpeta core un archivo urls.py
		# Se copia el from core import views y el urlpatterns
		# Se agrega el from . import views
		# Elimina del urls.py del webempresa el from core import views
		# Elimina los path del urlpatterns
		# Y agrega from django.urls import path, include
		# Y path('', include('core.urls')), en el urlpatterns
		
#---------------------------------------------------------------------------------------------------------------------------------------------------------

	Fusiona el Frontend y el Backend


	Identifica las partes comunes en todas las maquetas HTML y crea una estructura con herencia
	como hicimos con el primer proyecto (base.html, home.html...). 
	Deberás lograr un menú funcional y que se carguen correctamente los ficheros estáticos (css, javascripts, imágenes) de todos los templates.

	Notas: No olvides activar la app Core y reiniciar el servidor 
	para poder utilizar los recursos estáticos cargándolos con {% load static %} en su respectivo template.

#---------------------------------------------------------------------------------------------------------------------------------------------------------

	# Crear dentro de la carpeta core una carpetta templates
	# Dentro de la carpeta template, crear otra carpeta llamada core
	# Crear la carpeta static ( Para los ficheros estaticos)
	# Dentro de la carpeta static, crear la carpeta core
	
	# Copiar del webempresa_Frontend los .html y pegarlos en la carpeta webempresa/core/templates/core/
	# Copiar del webempresa_Frontend las carpetas (css, img, vendor) y pegarlos en la carpeta webempresa/core/static/core/
	
	# Cargar los templates estaticos
		# abrir el archivo settings.py de webempresa 
		# agregar la app core
		
		# cambiar del archivo views.py del core el HttpResponse por render
			def home(request):
				return render(request, "core/home.html")

	# Cargar los ficheros estaticos
		# abrir el home.html del core/templates/core/ y cargar los ficheros estaticos
			{% load static %}
		# sustituir los archivos de las carpetas (css, img, vendor)
			#Ej: 
			<!-- Bootstrap -->
			<link href="vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">
			por 
			<link href="{% static 'core/vendor/bootstrap/css/bootstrap.min.css' %}" rel="stylesheet">
			
		# copiar el home.html y cambiarle el nombre por base.html
		# verificar que secciones comunes tiene base.html con las demas paginas .html
		# borrar cabecera y mensaje
		# agregar 
			<!-- Contenido -->
			{% block content %}{% endblock %}
			
		# modificar la pagina home.html
		# borrar las secciones que son comunes
		# se deja solo cabecera y menssaje
		# se extiende de base 
			{% extends 'core/base.html' %}
		# cargar los ficheros estaticos
			{% load static %}
		# crear el bloque content
		
	# Configurar el menu
		# abrir el home.html, en ls seccion navegacion sustituir los href= .html por
			href="{% url 'home' %}"
#--------------------------------------------------------------------------------------------------------------------------------------------------------------

	Tercera App [Services] Modelo y admin
	

	La app Services es en esencia lo mismo que la app Portfolio de la web personal así que estoy seguro de que podrás implementarla sin ayuda. 
	Para hacerlo más llevadero la crearás en dos partes. Empezarás por crear el modelo y configurando el panel de administrador. Aquí tienes las indicaciones:

		Configura los ficheros media que funcionen en el servidor de desarrollo.

		Crea una app Services y añádela a la lista INSTALLED_APPS en settings.py.

		El modelo Service constará de 6 campos obligatorios, podéis utilizar de referencia el modelo Project de la app Portfolio del primer proyecto:

			Title: Un título con 200 caracteres de longitud máxima.

			Subtitle: Un subtítulo con 200 caracteres de longitud máxima.

			Content: Un texto de tamaño indefinido.

			Image: Una imagen para mostrar de fondo almacenada en el directorio services (dentro de media).

			Created: Un campo automático para gestionar la fecha y hora de creación.

			Updated: Un campo automático para gestionar la fecha y hora de última actualización.

		Haz una migración completa (makemigrations y migrate a secas, sin especificar nombre de app) y crea un superusuario para poder acceder al panel de administrador.

		Ahora configura la app para ser manejable desde el panel de administrador. Debes mostrar los campos especiales Created y Updated en modo sólo lectura.

		Toda la información de la app deberá aparecer en español (admin en general, nombre de la app, nombre del modelo y sus campos).
		
#--------------------------------------------------------------------------------------------------------------------------------------------------------------
 
	# Configurar los ficheros medias, para que funcione en el servidor de desarrollo
		
		# Crear una nueva carpeta llamada media
		# Ir al archivo /webempresa/settings.py y anadir la configuracion para los archivos medias
			# Media config
			MEDIA_URL = '/media/'
			MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
			
		# ir al urls.py
		# importar los settings que creamos para tener una referencia si esta activado el modo DEBUG
			from django.conf import settings
		# comprobar si el debug esta en marcha
			if settings.DEBUG:
				from django.conf.urls.static import static
				urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
				
	# Crear la app services
		python manage.py startapp services
		
		# Incluir la app en el settings.py
			'services'
			
	# Crear el modelo del servicio
		# ir al models.py de la carpeta services y crear la clase Service
		
	# Realizar la migracion completa
		python manage.py makemigrations
		python manage.py migrate
		
		
	# Crear un super usuario para entrar al administrador
		python manage.py createsuperuser
		Usernama : roman
		Email : roman@gmail.com
		Password: prueba1234      /  hola1234
		
	# Hacer que el modelo Service sea accesible desde el panel del administrador
		# Ir al services/admin.py
		# Importar de model el fichero services
			from .models import Service
		# Crear una configuracion basica al administrador
			class ServiceAdmin(admin.ModelAdmin):
				readonly_field = ('created', 'updated')
			
			admin.site.register(service, ServiceAdmin)
			
	# Traducir todo al espanol en el panel del administrador
		# Ir a settings.py
			LANGUAGE_CODE = 'es'
		
		# Traducir el nombre de la app
			# ir a services/apps.py 
				verbose_name = "Gestor de Servicios"
				
		# Volver al settings.py e indicarle que utilice esta configuracion extendida
			# modificar en el INSTALLED_APPS el 'services' por
				'services.apps.ServicesConfig',

#--------------------------------------------------------------------------------------------------------------------------------------------------------------

	Tercera App [Services] Vista y template
	
	En esta segunda parte te enfocarás en crear la vista y su respectivo template:

		Crea algunos servicios de prueba utilizando el panel de administrador, puedes utilizar la maqueta del frontend y sus imágenes (directorio img).

		Traslada el template services.html a un directorio templates/services en su propia app.

		Traslada la vista services a su propia app (no olvides borrar su path en las urls de Core) y renderiza el template anterior.

		Configura la vista que has creado en un fichero urls.py de app (services/urls.py) tal como hicimos con la app Core en las urls del proyecto, 
		de manera que funcione en la url /services/ de la web.

		Finalmente fusiona el template para que muestre los servicios creados en el panel de administrador.

#--------------------------------------------------------------------------------------------------------------------------------------------------------------

	# Traslada el template services.html a un directorio templates/services en su propia app.
		# En la carpeta services crear la carpeta templates y dentro de templates, crear ls carpeta services
		# Mover el archivo services.html de core/templates/core a services/templates/services
		
	# Traslada la vista services a su propia app (no olvides borrar su path en las urls de Core) y renderiza el template anterior.
		# Borrar el services de core/views.py y pegarlo en el services/views.py	
			def services(request):
				return render(request, "services/services.html")    # cambiar core por services
				
	# Crear el archivo urls.py en services
		# Copiar el contenido de urls.py del core al urls.py en services y borrar el path de service del urls.py del core
		
	# Agregar en el archivo webempresa/urls.py el Paths Services
		# Paths de services
		path('services/', include('services.urls')),

	# Fusionar el template para que muestre los servicios creados en el panel de administrador.
		# Acceder al modelo haciendo un import en el views.py desde services y listar los servicios
			from .models import Service	
			
	# Revisar el services.html
	
#--------------------------------------------------------------------------------------------------------------------------------------------------------------

	# Crear el app blog
		python namage.py startapp blog
		
	# Crear 2 modelos Categoria y Entrada dentro del archivo blog/models.py
	
	
	# Importar el modelo de usuario que contiene todos los usuarios registrados en el panel administrados
		from django.contrib.auth.models import User
		
	# al campo author crear una clave foranea ForeingKey
		author = models.ForeignKey(User, verbose_name="Autor", on_delete=models.CASCADE)
		
		Parametro_1 = User  # se enlaza el usuario como si fuera el autor de cada entrada
		Parametro_2 = verbose_name ="Autor"
		Parametro_3 = on_delete=models.CASCADE    # la opcion on_delete=models.CASCADE le indica a django, borrar todas las entradas que tenia el autor de forma de cascada
												  # cuando se relaciona 2 modelos (User, Autor) ejm: si se borra un usuario, la entrada se quedaria sin un autor
												  
	# Escoger varias categorias para una entrada
		# Por lo tanto se crea un campo con ManyToManyField
			categories = models.ManyToManyField(Category, verbose_name="Categorias")
			
			Parametro_1 = Category
			Parametro_2 = verbose_name="Categorias"
			
	# Agregar la app blog al archivo webempresa/settings.py
		
	# Migrar la app
		python manage.py makemigrations blog
		python manage.py migrate blog
		
	# Crear un administrador para el blog
		# ir al archivo blog/admin.py y cargar Category y Post
			from .models import Category, Post
			
#--------------------------------------------------------------------------------------------------------------------------------------------------------------

	# PERSONALIZAR EL PANEL DEL ADMINISTRADOR
		class PostAdmin(admin.ModelAdmin):
			readonly_fields = ('created', 'updated')
			list_display = ('title', 'author', 'published', 'post_categories')
			ordering = ('author', 'published')
			search_fields = ('title', 'content', 'author__username', 'categories__name')
			date_hierarchy = 'published'
			list_filter = ('author__username', 'categories__name')

			def post_categories(self, obj):
				return ", ".join([c.name for c in obj.categories.all().order_by("name")])
			post_categories.short_description = "Categorias"
			
#--------------------------------------------------------------------------------------------------------------------------------------------------------------

	# CREACION DE LAS VISTAS (ENTRADA y CATEGORIA) DEL BLOG
	
		# Trasladar de la core/views.py  al blog/views.py
			def blog(request):
				return render(request, "core/blog.html")
		
		# Crear la carpeta templates en blog, y dentro de templates crear la carpeta blog
		# Trasladar el template core/templates/core/blog.html a blog/templates/blog/blog.html
		
		# Configurar las urls 
		
			# Se borra de core/ulrs.py el path('blog/', views.blog, name='blog'),
			# y se crea el archivo urls.py en blog y se pega path('', views.blog, name='blog'),
			# modificar la webempresa/urls.py y agregar el path blog
				# Paths del blog
				path('blog/', include('blog.urls')),

		# Vista de Categorias
			# Crear una vista category dentro del archivo blog/views.py e importar Category
				from .models import Post, Category
				
				def category(request, category_id):
					pass
					
			# agregar el category_id en el path en el archivo blog/urls.py
				path('category/<int:category_id>/', views.category, name="category"),
				
#--------------------------------------------------------------------------------------------------------------------------------------------------------------

	# CREACION DEL APP SOCIAL
		python manage.py startapp social
		
		# Crear el modelo
			
			#ir al archivo social/model.py y crear el modelo
			
			# configurar un verbose_name para la app, ir al archivo social/apps.py
				# agregar a la clase class SocialConfig(AppConfig):
					verbose_name = 'Redes sociales'
					
			# Ir a webempresa/settings.py y agregar el app
				'social.apps.SocialConfig',
				
			# Migrar la app
				python manage.py makemigrations social
				python manage.py migrate social 
				
			# Crear un administrador para el blog
				# ir al archivo social/admin.py y cargar Link
				from .models import Link
				
		# Crear un procesador de contexto
			# se crea un nuevo archivo en la carpeta social, llamado processors.py
			
#--------------------------------------------------------------------------------------------------------------------------------------------------------------

	# CREACION DEL APP PAGES
		python manage.py startapp pages
		
		# Configurar el nombre de la app abriendo el archivo pages/apps.py	
			verbose_name = 'Gestor de paginas'
			
		# Ir a webempresa/settings.py y agregar el app
			'pages.apps.PagesConfig',
			
		# Crear el Modelo
			# Ir al archivo pages/model.py
			
		# Crear un administrador para el pages
			from .models import Page
			
		# Migrar la app
			python manage.py makemigrations pages
			python manage.py migrate pages

		# Ir al archivo pages/views.py e importar 
			from django.shortcuts import render, get_object_or_404
			from .models import Page
			
			# Create your views here.
			def page(request, page_id):
				page = get_object_or_404(Page, id=page_id)
				return render(request, 'pages/sample.html', {'page':page})
				
			# Crear la pagina sample.html
				# se crea la carpeta templates y dentro se crea la carpeta pages
				# moder el archivo core/templates/core/sample.html a pages/templates/pages/
				
			# Modificar la vista de core/views.py (borrar) 	
				def sample(request):
					return render(request, "core/sample.html")
		
			# Modificar la url de core/urls.py (borrar)
				path('sample/', views.sample, name='sample'),
				
			# Copiar el archivo blog/urls.py a pages/
				# modificar el urls.py
					path('<int:page_id>/', views.page, name="page")
					
			# Agregar en webempresa/urls.py
				# Paths del pages
				path('page/', include('peges.urls')),
				
			# Mostrar el contenido de la pagina
				# Ir al pages/templates/pages/sample.html
					
	# Creacion del Template Tag Propio COntenido personalizado
		
		# crear una carpeta en pages llamada templatetag y dentro de esa carpeta, crear un paquete
		# el paquete tiene el nombre de __init__.py
		# crear un archivo pages_extras.py
		# dentro del archivo pages_extras.py importar template y el modelo de pagina
			from django import template
			from pages.models import Page
			
		# crear el template que hace us0 de esta pagina
			def get_page_list():
				pages = Page.objects.all()
				return pages
				
		# registrar el template tag en la libreria de templates
			register = template.Library()

			@register.simple_tag
			def get_page_list():
				pages = Page.objects.all()
				return pages
				
		# Modficar el core/base.html y cargar el pages_extras.py
			{% load pages_extras %}
			{% get_page_list %}
			
		# Agregar un tercer parametro en la url de page
		
			# ir a core/base.html y agrega: page.title   con el filtro |slugify
				href="{% url 'page' page.id page.title|slugify %}"
				
			# ir a pages/urls.py para capturar el tercer parametro, anadir el parametro <slug:page_slug>
				path('<int:page_id>/<slug:page_slug>/', views.page, name="page"),
				
			# ir a la vista para recuperar el parametro pages/views.py y agregar page_slug
				def page(request, page_id, page_slug):
					page = get_object_or_404(Page, id=page_id)
					return render(request, 'pages/sample.html', {'page':page})

#--------------------------------------------------------------------------------------------------------------------------------------------------------------					
			
	# ORDENACION DE PAGINAS (SECUNDARIAS)
	
		# Agregar un nuevo campo al modelo en pages/models.py
			order = models.SmallIntegerField(verbose_name="Orden", default=0)
			
		# Cambiar en al class Meta:
			ordering = ['order', 'title']
			
		# Aplicar las migraciones ya que modificamos el modelo
			python manage.py makemigrations pages
			python manage.py migrate pages
			
		# Ir a pages/admin.py y anadir una tupla que mostrara el campo title y order
		
		
	# EDICION DIRECTA DE PAGINAS (SECUNDARIAS)	
		
		# Dentro del archivo webempresa/settings.py en el context procesor se encuentra la funcion que verifica la autenticacion,
			# inyecta datos de la seccion activa dentro del template y esta activado por defecto
				'django.contrib.auth.context_processors.auth',
		
		# Ir al archivo pages/templates/pages/sample.html
			# verificar si el usuario es autenticado
				{% if user.is_authenticated %}
					<p><a href="{% url 'admin:pages_page_change' page.id %}">Editar</a></p>
				{% endif %}
		
			# donde admin: es la app admin
			# pages_ : es la app pages que hace referencia a page
			# page_ : es el modelo que queremos editar
			# change : es la accion que queremos ejecutar
			# page_id : es un parametro

#--------------------------------------------------------------------------------------------------------------------------------------------------------------								

	# AGREGAR EL EDITOR WYSIWYG EN EL ADMINISTRADOR PERSONALIZADO
	
		# Instalar el ckeditor paquete
			pip install django-ckeditor
			
		# Anadir a las apps de django en el webempresa/settings.py INSTALLED_APPS
			'ckeditor',
			
		# Configurar los campos donde queremos mostrar el editor de WYSIWYG
			# Abrir el archivo pages/models.py e importar ckeditor
				from ckeditor.fields import RichTextField
				
			# sustituir el content = models.TextField(verbose_name="Contenido") por
				content = RichTextField(verbose_name="Contenido")
				
			# Aplicar las migraciones ya que modificamos el modelo
			python manage.py makemigrations pages
			python manage.py migrate pages
			
		# Redefinir el diccionario de la configuracion de webempresa/settings.py
			# Anadir la siguiente estructura
			
				# Ckeditor
				CKEDITOR_CONFIGS = {
					'default': {
						'toolbar': None,    # Esta configuracion muestra todos los campos
						'toolbar': 'Basic'  # Esta configuracion muestra campos basicos como negritas y cursivas
					}
				}
				
				# Otra configuracion de Ckeditor
				CKEDITOR_CONFIGS = {
					'default': {
						'toolbar': 'Custom',
						'toolbar_Custom': [
							['Bold', 'Italic', 'Underline'],
							['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-', 'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'],
							['Link', 'Unlink'],
							['RemoveFormat', 'Source']
						]
					}
				}
				
				# Decirle a djando que es codigo html seguro
					# modificar el archivo pages/templates/pages/sample.html {{page.content|linebreaks}} por
						{{page.content|safe}}
						
#--------------------------------------------------------------------------------------------------------------------------------------------------------------

	# CREACION DE LA APP CONTACT
	
		# creacion app contact/
			python manage.py startapp contact
			
		# quitar la funcion contact del core/views.py y pegarla en el contact/views.py
			def contact(request):
				return render(request, "contact/contact.html")
		
		# copiar el archivo core/urls.py y pegarlo en contact
		# dejar solo la url de contact
			path('', views.contact, name='contact'),
		
		# borrar la vista de contant el archivo core/urls.py		

		# Configurar la url global en webempresa/urls.py
			# Paths de contact
			path('contact/', include('contact.urls')),
			
		# anadir la app contact en webempresa/settings.py en INSTALLED_APPS
			'contact',
			
		# crear la carpeta templates en contact y dentro de ella la carpeta contact
		# trasladar el achivo core/templates/core/contact.html a contact/templates/contact
		
		
	# CREACION DEL FORMULARIO
	
		# se crea el archivo forms.py 
		# se importa la libreria form en forms.py
			from django import forms
		# crear la estructura del formulario
		
		# importar el formulario ContactForm a la vista contact/views.py
			from .forms import ContactForm
			
		# Instanciar el formulario antes de enviarlo al template
			contact_form = ContactForm()
			
		# enviarlo al template en un diccionario de contexto
			def contact(request):
				contact_form = ContactForm()
				return render(request, "contact/contact.html", {'form':contact_form})
				
		# dibujar el formulario en el archivo contact.html
			{{form}}
			
		# Arreglar el diceno del formulario usando una tabla
			<table>
				{{form.as_table}}
			</table>
			
		# cambiar el campo content a textarea, agregando un parametro widget=forms.Textarea
			content = forms.CharField(label="Contenido", required=True, widget=forms.Textarea)
			
		# configurar el formulario con la accion y el metodo
			<form action="" mothod="">
			
			# El action lo vamos a dejar vacio, eso le indicara en que pagina tiene que validar este formulario o enviarle los datos
			# el metodo GET: es visible a simple vista y aparecen los datos en la url
			# el motodo POST: oculta los datos que aparecen en la url
		
		# crear el input de tipo submit dentro del tag form, este input es un boton
		
		# Agregar el token csrf_token, que creara un campo oculto, con un valor automatizado, que prevendra que otas paginas puedan validar 
		# formularios contra la nuestra 
			{% csrf_token %}
		
		# para mostrar los datos en forma de diccionario, enviados con el metodo POST, agregamos despues del tag form:
			{{request.POST}}
			
		# para enviar los datos de form primero tenemos que validar que estamos usando el metodo POST
			# ir al archivo contact/views.py y agregar la validacion
				if request.method == "POST":
					contact_form = ContactForm(data=request.POST)
					
			# Validar que todos los campos de formulario requeridos estan llenos y recuperar sus valores en los campos
				if contact_form.is_valid():
					name = request.POST.get('name', '')
					email = request.POST.get('email', '')
					content = request.POST.get('content', '')
					
			# Realizar un redirect hacia la misma pagina contact, pero con un mensaje de OK
				# importar la funcion redirect que sirve para redireccionar paginas
					from django.shortcuts import render, redirect
					
				# realizar el redirect (obsoleto)
					return redirect('/contact/?ok')
					
				# redirect correcto
					# importamos la funcion reverse
						from django.urls import reverse
					# realizamos el envio
						return redirect(reverse('contact')+"?ok")
						
					# Para mostrar el mensaje de que todo esta correcto
						# agregamos una valicaion en el archivo contact.html
							{% if 'ok' in request.GET %}
								<p><b>Su emnsaje se ha enviado correctamente, en breve nos pondremos en contacto con usted.</b></p>
							{% endif %}
				
#--------------------------------------------------------------------------------------------------------------------------------------------------------------
			
	# FUSIONAR EL FORMULARIO
		
		# Sustituir los input de name, email y contact 
			{{form.name}}
			{{form.email}}
			{{form.content}}
			
		# Implementar los errores de campos despues de la capa <div class="input-group"> de cada campo
			{{form.name.error}}
			{{form.email.error}}
			{{form.content.error}}
		
#--------------------------------------------------------------------------------------------------------------------------------------------------------------

	# ENVIAR EMAIL DE PRUEBA
	
		# registrar una cuenta de correo de prueba en https://mailtrap.io/
		# obtener las credencialesfrom django.core.mail import EmailMessage
			EMAIL_HOST = 'smtp.mailtrap.io'
			EMAIL_HOST_USER = '9e640ea41670fe'
			EMAIL_HOST_PASSWORD = '7073beb0e99c61'
			EMAIL_PORT = '2525'
			
		# agregar los datos en webempresa/settings.py
		
		# ir al archivo contact/views.py e importar la clase EmailMessage
			from django.core.mail import EmailMessage
			
			# Estructura del email
				email = EmailMessage(
                asunto,
                cuerpo,
                email_origen,
                email_destino,
                reply_to=[email]
            )
			
			#-------------------------
			
			 email = EmailMessage(
                "La Caffettiera: Nuevo mensaje de contacto",
                "De {} <{}>\n\nEscribio:\n\n{}".format(name, email, content),
                "no-contestar@inbox.mailtrap.io",
                ["valeroman@gmail.com"],
                reply_to=[email]
            )
			
		# para enviar el correo
			 try:
                email.send()
                # Todo ha ido bien, redireccionamos a OK
                return redirect(reverse('contact')+"?ok")
            except:
                # Algo no ha ido bien, redireccionamos a FAIL
                return redirect(reverse('contact')+"?fail")
				
#--------------------------------------------------------------------------------------------------------------------------------------------------------------

	# CREACION DE GRUPOS Y PERMISOS DE USUARIOS EN EL PANEL DE ADMINISTRACION
	
		# Creacion de grupo para gestionar los permisos de los trabajadores de la empresa
		
			# Creamos un grupo llamado Personal y los permisos son:
				blog, pages, services y social (solo editar)
	
		# Creacion de usuario de prueba test y pass chao123456
		# en permisos activar Es staff, para que pueda acceder al panel de administracion
		# seleccional el grupo personal
		
		
	# Colocar los campos nombre clave y Red Social solo read_only
		# ir al archivo social/admin.py y crear la funcion get_readonly_fields
			def get_readonly_fields(self, request, obj=None):
				if request.user.groups.filter(name="Personal").exists():
					return ('created', 'updated', 'key', 'name')
				else:
					return ('created', 'updated')
		
			
		